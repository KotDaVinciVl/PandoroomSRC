
Attiny2313_7SEG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800074  00800074  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000249  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012d  00000000  00000000  00000659  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000017d  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00000904  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e7  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017d  00000000  00000000  00000be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__vector_5>
   c:	cd c0       	rjmp	.+410    	; 0x1a8 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ee       	ldi	r30, 0xE0	; 224
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 38       	cpi	r26, 0x80	; 128
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	31 d1       	rcall	.+610    	; 0x2bc <main>
  5a:	40 c1       	rjmp	.+640    	; 0x2dc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_5>:
	//show_number(time_minutes/10,DIG_1);
	//show_number(time_hr%10,DIG_2);
	//show_number(time_hr/10,DIG_3);
}
ISR (TIMER1_OVF_vect)//Прерывание по таймеру для счёта времени
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
	if(ms>1000)
  6e:	80 91 7c 00 	lds	r24, 0x007C
  72:	90 91 7d 00 	lds	r25, 0x007D
  76:	89 3e       	cpi	r24, 0xE9	; 233
  78:	93 40       	sbci	r25, 0x03	; 3
  7a:	6c f0       	brlt	.+26     	; 0x96 <__vector_5+0x38>
	{
		time_seconds++;
  7c:	80 91 78 00 	lds	r24, 0x0078
  80:	90 91 79 00 	lds	r25, 0x0079
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	90 93 79 00 	sts	0x0079, r25
  8a:	80 93 78 00 	sts	0x0078, r24
		ms=0;
  8e:	10 92 7d 00 	sts	0x007D, r1
  92:	10 92 7c 00 	sts	0x007C, r1
	}
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	2f 91       	pop	r18
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <setup_output>:
		ReadInput();//Пока у нас в фоне выводится время в главном цикле читаем состояние кнопок
    }
}
void setup_output()//Настройка вывода
{
	SEGMENT_DDR = 0xFF;//Все порты сегментов на выход
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
	DIGIT_DDR |= (1<<DIG_0)|(1<<DIG_1)|(1<<DIG_2)|(1<<DIG_3);//Так же все порты разрядов на выход
  aa:	91 b3       	in	r25, 0x11	; 17
  ac:	98 67       	ori	r25, 0x78	; 120
  ae:	91 bb       	out	0x11, r25	; 17
	DIGIT_PORT = 0xFF;//Выключаем все разряды
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	08 95       	ret

000000b4 <setup_input>:
}
void setup_input()//Настраиваем кнопки для ввода
{
	BTN_DDR |= (0<<BTN0)|(0<<BTN1)|(0<<BTN2);
  b4:	81 b3       	in	r24, 0x11	; 17
  b6:	81 bb       	out	0x11, r24	; 17
	BTN_PORT |= (1<<BTN0)|(1<<BTN1)|(1<<BTN2);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	87 60       	ori	r24, 0x07	; 7
  bc:	82 bb       	out	0x12, r24	; 18
  be:	08 95       	ret

000000c0 <show_number>:
}
void show_number(int num,int dig)//Вывод числа на сегментн
{
	SEGMENT_PORT = 0xFF;
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	28 bb       	out	0x18, r18	; 24
	DIGIT_PORT = (1<<BTN0)|(1<<BTN1)|(1<<BTN2);
  c4:	27 e0       	ldi	r18, 0x07	; 7
  c6:	22 bb       	out	0x12, r18	; 18
	DIGIT_PORT &= ~(1<<dig);
  c8:	42 b3       	in	r20, 0x12	; 18
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	06 2e       	mov	r0, r22
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <show_number+0x16>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <show_number+0x12>
  da:	52 2f       	mov	r21, r18
  dc:	50 95       	com	r21
  de:	45 23       	and	r20, r21
  e0:	42 bb       	out	0x12, r20	; 18
	if(dig==DIG_2)
  e2:	63 30       	cpi	r22, 0x03	; 3
  e4:	71 05       	cpc	r23, r1
  e6:	31 f4       	brne	.+12     	; 0xf4 <__stack+0x15>
	{
		SEGMENT_PORT = SEGMENT_DOT[num];//~SEGMENT_DOT[num];
  e8:	fc 01       	movw	r30, r24
  ea:	e0 5a       	subi	r30, 0xA0	; 160
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	80 81       	ld	r24, Z
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	05 c0       	rjmp	.+10     	; 0xfe <__stack+0x1f>
		
	}
	else
	{
		SEGMENT_PORT = SEGMENT_NODOT[num];//~SEGMENT_NODOT[num];
  f4:	fc 01       	movw	r30, r24
  f6:	e6 59       	subi	r30, 0x96	; 150
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	80 81       	ld	r24, Z
  fc:	88 bb       	out	0x18, r24	; 24
	}
	DIGIT_PORT |= _BV(dig);
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	28 2b       	or	r18, r24
 102:	22 bb       	out	0x12, r18	; 18
 104:	08 95       	ret

00000106 <check_time>:
}
void check_time()//Проверка правильности времени
{
	if(time_seconds>59)
 106:	80 91 78 00 	lds	r24, 0x0078
 10a:	90 91 79 00 	lds	r25, 0x0079
 10e:	8c 33       	cpi	r24, 0x3C	; 60
 110:	91 05       	cpc	r25, r1
 112:	74 f0       	brlt	.+28     	; 0x130 <check_time+0x2a>
	{
		time_seconds=0;
 114:	10 92 79 00 	sts	0x0079, r1
 118:	10 92 78 00 	sts	0x0078, r1
		time_minutes++;
 11c:	80 91 76 00 	lds	r24, 0x0076
 120:	90 91 77 00 	lds	r25, 0x0077
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 77 00 	sts	0x0077, r25
 12a:	80 93 76 00 	sts	0x0076, r24
 12e:	06 c0       	rjmp	.+12     	; 0x13c <check_time+0x36>
	}
	else if(time_seconds<0)
 130:	99 23       	and	r25, r25
 132:	24 f4       	brge	.+8      	; 0x13c <check_time+0x36>
	{
		time_seconds=0;
 134:	10 92 79 00 	sts	0x0079, r1
 138:	10 92 78 00 	sts	0x0078, r1
	}
	if(time_minutes>59)
 13c:	80 91 76 00 	lds	r24, 0x0076
 140:	90 91 77 00 	lds	r25, 0x0077
 144:	8c 33       	cpi	r24, 0x3C	; 60
 146:	91 05       	cpc	r25, r1
 148:	74 f0       	brlt	.+28     	; 0x166 <check_time+0x60>
	{
		time_minutes=0;
 14a:	10 92 77 00 	sts	0x0077, r1
 14e:	10 92 76 00 	sts	0x0076, r1
		time_hr++;
 152:	80 91 74 00 	lds	r24, 0x0074
 156:	90 91 75 00 	lds	r25, 0x0075
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	90 93 75 00 	sts	0x0075, r25
 160:	80 93 74 00 	sts	0x0074, r24
 164:	06 c0       	rjmp	.+12     	; 0x172 <check_time+0x6c>
	}
	else if(time_minutes<0)
 166:	99 23       	and	r25, r25
 168:	24 f4       	brge	.+8      	; 0x172 <check_time+0x6c>
	{
		time_minutes=0;
 16a:	10 92 77 00 	sts	0x0077, r1
 16e:	10 92 76 00 	sts	0x0076, r1
	}
	if(time_hr>23)
 172:	80 91 74 00 	lds	r24, 0x0074
 176:	90 91 75 00 	lds	r25, 0x0075
 17a:	88 31       	cpi	r24, 0x18	; 24
 17c:	91 05       	cpc	r25, r1
 17e:	6c f0       	brlt	.+26     	; 0x19a <check_time+0x94>
	{
		time_hr=0;
 180:	10 92 75 00 	sts	0x0075, r1
 184:	10 92 74 00 	sts	0x0074, r1
		time_seconds=0;
 188:	10 92 79 00 	sts	0x0079, r1
 18c:	10 92 78 00 	sts	0x0078, r1
		time_minutes=0;
 190:	10 92 77 00 	sts	0x0077, r1
 194:	10 92 76 00 	sts	0x0076, r1
 198:	08 95       	ret
	}
	else if(time_hr<0)
 19a:	99 23       	and	r25, r25
 19c:	24 f4       	brge	.+8      	; 0x1a6 <check_time+0xa0>
	{
		time_hr=0;
 19e:	10 92 75 00 	sts	0x0075, r1
 1a2:	10 92 74 00 	sts	0x0074, r1
 1a6:	08 95       	ret

000001a8 <__vector_6>:
#define DIG_1 PD6
#define DIG_2 PD3
#define DIG_3 PD4

ISR(TIMER0_OVF_vect)//Прерывание по таймеру, для вывода времени
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	ms++;
 1ca:	80 91 7c 00 	lds	r24, 0x007C
 1ce:	90 91 7d 00 	lds	r25, 0x007D
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 7d 00 	sts	0x007D, r25
 1d8:	80 93 7c 00 	sts	0x007C, r24
	i++;
 1dc:	80 91 7e 00 	lds	r24, 0x007E
 1e0:	90 91 7f 00 	lds	r25, 0x007F
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	90 93 7f 00 	sts	0x007F, r25
 1ea:	80 93 7e 00 	sts	0x007E, r24
	check_time();
 1ee:	8b df       	rcall	.-234    	; 0x106 <check_time>
	//show_number(time_minutes%10,DIG_0);
	//show_number(time_minutes/10,DIG_1);
	//show_number(time_hr%10,DIG_2);
	//show_number(time_hr/10,DIG_3);
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <ReadInput>:
	}
	
}
void ReadInput()//Кнопки ввода
{
	switch(mode)//Два режима +- минуты и +- часы
 212:	80 91 7a 00 	lds	r24, 0x007A
 216:	90 91 7b 00 	lds	r25, 0x007B
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	19 f0       	breq	.+6      	; 0x224 <ReadInput+0x12>
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	41 f1       	breq	.+80     	; 0x272 <ReadInput+0x60>
 222:	08 95       	ret
	{
		case 0:
		if(bit_is_clear(BTN_PIN,BTN0)==1)//Кнопка 0 нажата
 224:	80 99       	sbic	0x10, 0	; 16
 226:	0c c0       	rjmp	.+24     	; 0x240 <ReadInput+0x2e>
		{
			while(bit_is_clear(BTN_PIN,BTN0)==1);//Ждём, пока отпустим кнопку
 228:	80 9b       	sbis	0x10, 0	; 16
 22a:	fe cf       	rjmp	.-4      	; 0x228 <ReadInput+0x16>
			time_minutes++;//+1 минута
 22c:	80 91 76 00 	lds	r24, 0x0076
 230:	90 91 77 00 	lds	r25, 0x0077
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 77 00 	sts	0x0077, r25
 23a:	80 93 76 00 	sts	0x0076, r24
 23e:	08 95       	ret
		}
		else if(bit_is_clear(BTN_PIN,BTN1)==1)//Кнопка 1 нажата
 240:	81 99       	sbic	0x10, 1	; 16
 242:	0c c0       	rjmp	.+24     	; 0x25c <ReadInput+0x4a>
		{
			while(bit_is_clear(BTN_PIN,BTN1)==1);//Ждём, пока отпустим кнопку
 244:	81 9b       	sbis	0x10, 1	; 16
 246:	fe cf       	rjmp	.-4      	; 0x244 <ReadInput+0x32>
			time_minutes--;//-1 минута
 248:	80 91 76 00 	lds	r24, 0x0076
 24c:	90 91 77 00 	lds	r25, 0x0077
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	90 93 77 00 	sts	0x0077, r25
 256:	80 93 76 00 	sts	0x0076, r24
 25a:	08 95       	ret
		}
		else if(bit_is_clear(BTN_PIN,BTN2)==1)//Кнопка 2 нажата
 25c:	82 99       	sbic	0x10, 2	; 16
 25e:	2d c0       	rjmp	.+90     	; 0x2ba <ReadInput+0xa8>
		{
			while(bit_is_clear(BTN_PIN,BTN2)==1);//Ждём, пока отпустим кнопку
 260:	82 9b       	sbis	0x10, 2	; 16
 262:	fe cf       	rjmp	.-4      	; 0x260 <ReadInput+0x4e>
			mode=1;//Переключаем режим
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	90 93 7b 00 	sts	0x007B, r25
 26c:	80 93 7a 00 	sts	0x007A, r24
 270:	08 95       	ret
		}
		break;
		case 1://Идентично первому case, только +- минута будет +- час
		if(bit_is_clear(BTN_PIN,BTN0)==1)
 272:	80 99       	sbic	0x10, 0	; 16
 274:	0c c0       	rjmp	.+24     	; 0x28e <ReadInput+0x7c>
		{
			while(bit_is_clear(BTN_PIN,BTN0)==1);
 276:	80 9b       	sbis	0x10, 0	; 16
 278:	fe cf       	rjmp	.-4      	; 0x276 <ReadInput+0x64>
			time_hr++;
 27a:	80 91 74 00 	lds	r24, 0x0074
 27e:	90 91 75 00 	lds	r25, 0x0075
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	90 93 75 00 	sts	0x0075, r25
 288:	80 93 74 00 	sts	0x0074, r24
 28c:	08 95       	ret
		}
		else if(bit_is_clear(BTN_PIN,BTN1)==1)
 28e:	81 99       	sbic	0x10, 1	; 16
 290:	0c c0       	rjmp	.+24     	; 0x2aa <ReadInput+0x98>
		{
			while(bit_is_clear(BTN_PIN,BTN1)==1);
 292:	81 9b       	sbis	0x10, 1	; 16
 294:	fe cf       	rjmp	.-4      	; 0x292 <ReadInput+0x80>
			time_hr--;
 296:	80 91 74 00 	lds	r24, 0x0074
 29a:	90 91 75 00 	lds	r25, 0x0075
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	90 93 75 00 	sts	0x0075, r25
 2a4:	80 93 74 00 	sts	0x0074, r24
 2a8:	08 95       	ret
		}
		else if(bit_is_clear(BTN_PIN,BTN2)==1)
 2aa:	82 99       	sbic	0x10, 2	; 16
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <ReadInput+0xa8>
		{
			while(bit_is_clear(BTN_PIN,BTN2)==1);
 2ae:	82 9b       	sbis	0x10, 2	; 16
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <ReadInput+0x9c>
			mode=0;
 2b2:	10 92 7b 00 	sts	0x007B, r1
 2b6:	10 92 7a 00 	sts	0x007A, r1
 2ba:	08 95       	ret

000002bc <main>:
}

int main(void)
{
	//Включаем таймеры
	TIMSK = 1 << TOIE0 | 1 << TOIE1;
 2bc:	82 e8       	ldi	r24, 0x82	; 130
 2be:	89 bf       	out	0x39, r24	; 57
	TCCR1B = 1 << CS01;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	8e bd       	out	0x2e, r24	; 46
	TCCR0B = 1 << CS00;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	83 bf       	out	0x33, r24	; 51
	//Разрешаем прерывания
	sei();
 2c8:	78 94       	sei
	setup_output();//Настраиваем семгентный дисплей
 2ca:	ed de       	rcall	.-550    	; 0xa6 <setup_output>
	setup_input();//Настраиваем кнопки ввода
 2cc:	f3 de       	rcall	.-538    	; 0xb4 <setup_input>
	show_number(0,DIG_0);
 2ce:	65 e0       	ldi	r22, 0x05	; 5
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	f4 de       	rcall	.-536    	; 0xc0 <show_number>
    while(1)
    {
		ReadInput();//Пока у нас в фоне выводится время в главном цикле читаем состояние кнопок
 2d8:	9c df       	rcall	.-200    	; 0x212 <ReadInput>
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <main+0x1c>

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
