
Attiny2313_Password_Telephone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000172  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  00000212  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001fa  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000131  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000193  00000000  00000000  000005a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000226  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000a5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e7       	ldi	r30, 0x72	; 114
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 36       	cpi	r26, 0x6E	; 110
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	85 d0       	rcall	.+266    	; 0x164 <main>
  5a:	89 c0       	rjmp	.+274    	; 0x16e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <InitInput>:
	}
}

void InitInput()
{
	BTNS_DDR |= SET_BTNS_ON;
  5e:	87 b3       	in	r24, 0x17	; 23
  60:	8f 63       	ori	r24, 0x3F	; 63
  62:	87 bb       	out	0x17, r24	; 23
	BTNS_PORT |= SET_BTNS_ON;
  64:	88 b3       	in	r24, 0x18	; 24
  66:	8f 63       	ori	r24, 0x3F	; 63
  68:	88 bb       	out	0x18, r24	; 24
  6a:	08 95       	ret

0000006c <ReadBtns>:
}

void ReadBtns()
{
  6c:	e0 e6       	ldi	r30, 0x60	; 96
  6e:	f0 e0       	ldi	r31, 0x00	; 0
	//Проверим все кнопки по циклу
	for(int i=0;i!=MAXBTN;i++)
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	50 e0       	ldi	r21, 0x00	; 0
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	70 e0       	ldi	r23, 0x00	; 0
	{
		//Если текущая кнопка == той, что нужно нажать
		if(i==ToCheckNow)
  78:	80 91 6c 00 	lds	r24, 0x006C
  7c:	90 91 6d 00 	lds	r25, 0x006D
  80:	48 17       	cp	r20, r24
  82:	59 07       	cpc	r21, r25
  84:	f9 f4       	brne	.+62     	; 0xc4 <ReadBtns+0x58>
		{
			//Проверяем на нажатость
			if(bit_is_set(BTNS_PIN,CorrectButtons[ToCheckNow]))
  86:	86 b3       	in	r24, 0x16	; 22
  88:	20 81       	ld	r18, Z
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 2e       	mov	r0, r18
  8e:	02 c0       	rjmp	.+4      	; 0x94 <ReadBtns+0x28>
  90:	95 95       	asr	r25
  92:	87 95       	ror	r24
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <ReadBtns+0x24>
  98:	80 ff       	sbrs	r24, 0
  9a:	3f c0       	rjmp	.+126    	; 0x11a <__stack+0x3b>
  9c:	cb 01       	movw	r24, r22
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <ReadBtns+0x38>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	2a 95       	dec	r18
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <ReadBtns+0x34>
  a8:	9c 01       	movw	r18, r24
			{
				//Ждем пока не человек отпустит кнопку
				while(bit_is_set(BTNS_PIN,CorrectButtons[ToCheckNow]));
  aa:	86 b3       	in	r24, 0x16	; 22
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	82 23       	and	r24, r18
  b0:	93 23       	and	r25, r19
  b2:	89 2b       	or	r24, r25
  b4:	d1 f7       	brne	.-12     	; 0xaa <ReadBtns+0x3e>
  b6:	ca 01       	movw	r24, r20
  b8:	01 96       	adiw	r24, 0x01	; 1
				ToCheckNow++;
  ba:	90 93 6d 00 	sts	0x006D, r25
  be:	80 93 6c 00 	sts	0x006C, r24
  c2:	2b c0       	rjmp	.+86     	; 0x11a <__stack+0x3b>
			}
		}
		else
		{
			//Реакция на не правильно нажатую кнопку
			if(bit_is_set(BTNS_PIN,CorrectButtons[ToCheckNow]))
  c4:	36 b3       	in	r19, 0x16	; 22
  c6:	dc 01       	movw	r26, r24
  c8:	aa 0f       	add	r26, r26
  ca:	bb 1f       	adc	r27, r27
  cc:	a0 5a       	subi	r26, 0xA0	; 160
  ce:	bf 4f       	sbci	r27, 0xFF	; 255
  d0:	2c 91       	ld	r18, X
  d2:	83 2f       	mov	r24, r19
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 2e       	mov	r0, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <ReadBtns+0x72>
  da:	95 95       	asr	r25
  dc:	87 95       	ror	r24
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <ReadBtns+0x6e>
  e2:	80 ff       	sbrs	r24, 0
  e4:	12 c0       	rjmp	.+36     	; 0x10a <__stack+0x2b>
  e6:	cb 01       	movw	r24, r22
  e8:	02 c0       	rjmp	.+4      	; 0xee <__stack+0xf>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	2a 95       	dec	r18
  f0:	e2 f7       	brpl	.-8      	; 0xea <__stack+0xb>
  f2:	9c 01       	movw	r18, r24
			{
				//Ждем пока не человек отпустит кнопку
				while(bit_is_set(BTNS_PIN,CorrectButtons[ToCheckNow]));
  f4:	86 b3       	in	r24, 0x16	; 22
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	82 23       	and	r24, r18
  fa:	93 23       	and	r25, r19
  fc:	89 2b       	or	r24, r25
  fe:	d1 f7       	brne	.-12     	; 0xf4 <__stack+0x15>
				ToCheckNow=0;
 100:	10 92 6d 00 	sts	0x006D, r1
 104:	10 92 6c 00 	sts	0x006C, r1
 108:	08 c0       	rjmp	.+16     	; 0x11a <__stack+0x3b>
			}
			//Реакция на не правильную кнопку
			else if(bit_is_set(BTNS_PIN,BTN6))
 10a:	b5 9b       	sbis	0x16, 5	; 22
 10c:	06 c0       	rjmp	.+12     	; 0x11a <__stack+0x3b>
			{
				while(bit_is_set(BTNS_PIN,BTN6));
 10e:	b5 99       	sbic	0x16, 5	; 22
 110:	fe cf       	rjmp	.-4      	; 0x10e <__stack+0x2f>
				ToCheckNow=0;
 112:	10 92 6d 00 	sts	0x006D, r1
 116:	10 92 6c 00 	sts	0x006C, r1
}

void ReadBtns()
{
	//Проверим все кнопки по циклу
	for(int i=0;i!=MAXBTN;i++)
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	32 96       	adiw	r30, 0x02	; 2
 120:	46 30       	cpi	r20, 0x06	; 6
 122:	51 05       	cpc	r21, r1
 124:	09 f0       	breq	.+2      	; 0x128 <__stack+0x49>
 126:	a8 cf       	rjmp	.-176    	; 0x78 <ReadBtns+0xc>
				while(bit_is_set(BTNS_PIN,BTN6));
				ToCheckNow=0;
			}
		}
	}
}
 128:	08 95       	ret

0000012a <ReadHandle>:
    }
}

void ReadHandle()
{
	if(ToCheckNow==MAXBTN)
 12a:	80 91 6c 00 	lds	r24, 0x006C
 12e:	90 91 6d 00 	lds	r25, 0x006D
 132:	06 97       	sbiw	r24, 0x06	; 6
 134:	a9 f4       	brne	.+42     	; 0x160 <ReadHandle+0x36>
	{
		OUT_SIG_ON;
 136:	90 9a       	sbi	0x12, 0	; 18
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	30 e7       	ldi	r19, 0x70	; 112
 140:	42 e0       	ldi	r20, 0x02	; 2
 142:	21 50       	subi	r18, 0x01	; 1
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	40 40       	sbci	r20, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <ReadHandle+0x18>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <ReadHandle+0x22>
 14c:	00 00       	nop
 14e:	01 97       	sbiw	r24, 0x01	; 1
		for(int i=0;i<15;i++){_delay_ms(100);}
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	a1 f7       	brne	.-24     	; 0x13c <ReadHandle+0x12>
		OUT_SIG_OFF;
 154:	90 98       	cbi	0x12, 0	; 18
		ToCheckNow=0;
 156:	10 92 6d 00 	sts	0x006D, r1
 15a:	10 92 6c 00 	sts	0x006C, r1
 15e:	08 95       	ret
	}
	else
	{
		ReadBtns();
 160:	85 df       	rcall	.-246    	; 0x6c <ReadBtns>
 162:	08 95       	ret

00000164 <main>:
//Функция обработки нажатия кнопок
void ReadHandle();

int main(void)
{
	InitInput();//Инициализируем кнопки
 164:	7c df       	rcall	.-264    	; 0x5e <InitInput>
	INIT_OUT_PORT;//Инициализируем выход
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	81 bb       	out	0x11, r24	; 17
    while(1)
    {
		ReadHandle();//Обработка ввода
 16a:	df df       	rcall	.-66     	; 0x12a <ReadHandle>
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x6>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
